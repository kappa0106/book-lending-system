{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { mapActions } from 'vuex';\nexport default {\n  data() {\n    return {\n      form: {\n        username: '',\n        email: '',\n        password: '',\n        confirmPassword: ''\n      },\n      rules: {\n        username: [{\n          required: true,\n          message: 'Please enter username',\n          trigger: 'blur'\n        }],\n        email: [{\n          required: true,\n          message: 'Please enter email',\n          trigger: 'blur'\n        }, {\n          type: 'email',\n          message: 'Please enter a valid email address',\n          trigger: ['blur', 'change']\n        }],\n        password: [{\n          required: true,\n          message: 'Please enter password',\n          trigger: 'blur'\n        }, {\n          min: 6,\n          message: 'Password length must be at least 6 characters',\n          trigger: 'blur'\n        }],\n        confirmPassword: [{\n          required: true,\n          message: 'Please confirm password',\n          trigger: 'blur'\n        }, {\n          validator: (rule, value, callback) => {\n            if (value !== this.form.password) {\n              callback(new Error('Passwords do not match'));\n            } else {\n              callback();\n            }\n          },\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  methods: {\n    ...mapActions(['registerUser']),\n    register() {\n      this.$refs.registerForm.validate(valid => {\n        if (valid) {\n          // Call Vuex action to register user\n          this.registerUser(this.form).then(() => {\n            // Registration successful, redirect to login page or other page\n            this.$router.push('/login');\n          }).catch(error => {\n            // Handle registration error\n            console.error('Registration error:', error);\n          });\n        } else {\n          // Form validation failed\n          return false;\n        }\n      });\n    },\n    resetForm() {\n      this.$refs.registerForm.resetFields();\n    }\n  }\n};","map":{"version":3,"names":["mapActions","data","form","username","email","password","confirmPassword","rules","required","message","trigger","type","min","validator","rule","value","callback","Error","methods","register","$refs","registerForm","validate","valid","registerUser","then","$router","push","catch","error","console","resetForm","resetFields"],"sources":["src/views/register/Register.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <h1>Register</h1>\r\n      <el-form :model=\"form\" :rules=\"rules\" ref=\"registerForm\" label-width=\"120px\" style=\"max-width: 400px; margin: 0 auto;\">\r\n        <el-form-item label=\"Username\" prop=\"username\">\r\n          <el-input v-model=\"form.username\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"Email\" prop=\"email\">\r\n          <el-input v-model=\"form.email\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"Password\" prop=\"password\">\r\n          <el-input v-model=\"form.password\" show-password></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"Confirm Password\" prop=\"confirmPassword\">\r\n          <el-input v-model=\"form.confirmPassword\" show-password></el-input>\r\n        </el-form-item>\r\n        <el-form-item>\r\n          <el-button type=\"primary\" @click=\"register\">Register</el-button>\r\n          <el-button @click=\"resetForm\">Reset</el-button>\r\n        </el-form-item>\r\n      </el-form>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import { mapActions } from 'vuex';\r\n  \r\n  export default {\r\n    data() {\r\n      return {\r\n        form: {\r\n          username: '',\r\n          email: '',\r\n          password: '',\r\n          confirmPassword: ''\r\n        },\r\n        rules: {\r\n          username: [\r\n            { required: true, message: 'Please enter username', trigger: 'blur' }\r\n          ],\r\n          email: [\r\n            { required: true, message: 'Please enter email', trigger: 'blur' },\r\n            { type: 'email', message: 'Please enter a valid email address', trigger: ['blur', 'change'] }\r\n          ],\r\n          password: [\r\n            { required: true, message: 'Please enter password', trigger: 'blur' },\r\n            { min: 6, message: 'Password length must be at least 6 characters', trigger: 'blur' }\r\n          ],\r\n          confirmPassword: [\r\n            { required: true, message: 'Please confirm password', trigger: 'blur' },\r\n            {\r\n              validator: (rule, value, callback) => {\r\n                if (value !== this.form.password) {\r\n                  callback(new Error('Passwords do not match'));\r\n                } else {\r\n                  callback();\r\n                }\r\n              },\r\n              trigger: 'blur'\r\n            }\r\n          ]\r\n        }\r\n      };\r\n    },\r\n    methods: {\r\n      ...mapActions(['registerUser']),\r\n      register() {\r\n        this.$refs.registerForm.validate(valid => {\r\n          if (valid) {\r\n            // Call Vuex action to register user\r\n            this.registerUser(this.form)\r\n              .then(() => {\r\n                // Registration successful, redirect to login page or other page\r\n                this.$router.push('/login');\r\n              })\r\n              .catch(error => {\r\n                // Handle registration error\r\n                console.error('Registration error:', error);\r\n              });\r\n          } else {\r\n            // Form validation failed\r\n            return false;\r\n          }\r\n        });\r\n      },\r\n      resetForm() {\r\n        this.$refs.registerForm.resetFields();\r\n      }\r\n    }\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  </style>\r\n  "],"mappings":";AAyBA,SAAAA,UAAA;AAEA;EACAC,KAAA;IACA;MACAC,IAAA;QACAC,QAAA;QACAC,KAAA;QACAC,QAAA;QACAC,eAAA;MACA;MACAC,KAAA;QACAJ,QAAA,GACA;UAAAK,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA,EACA;QACAN,KAAA,GACA;UAAAI,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA,GACA;UAAAC,IAAA;UAAAF,OAAA;UAAAC,OAAA;QAAA,EACA;QACAL,QAAA,GACA;UAAAG,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA,GACA;UAAAE,GAAA;UAAAH,OAAA;UAAAC,OAAA;QAAA,EACA;QACAJ,eAAA,GACA;UAAAE,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA,GACA;UACAG,SAAA,EAAAA,CAAAC,IAAA,EAAAC,KAAA,EAAAC,QAAA;YACA,IAAAD,KAAA,UAAAb,IAAA,CAAAG,QAAA;cACAW,QAAA,KAAAC,KAAA;YACA;cACAD,QAAA;YACA;UACA;UACAN,OAAA;QACA;MAEA;IACA;EACA;EACAQ,OAAA;IACA,GAAAlB,UAAA;IACAmB,SAAA;MACA,KAAAC,KAAA,CAAAC,YAAA,CAAAC,QAAA,CAAAC,KAAA;QACA,IAAAA,KAAA;UACA;UACA,KAAAC,YAAA,MAAAtB,IAAA,EACAuB,IAAA;YACA;YACA,KAAAC,OAAA,CAAAC,IAAA;UACA,GACAC,KAAA,CAAAC,KAAA;YACA;YACAC,OAAA,CAAAD,KAAA,wBAAAA,KAAA;UACA;QACA;UACA;UACA;QACA;MACA;IACA;IACAE,UAAA;MACA,KAAAX,KAAA,CAAAC,YAAA,CAAAW,WAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}