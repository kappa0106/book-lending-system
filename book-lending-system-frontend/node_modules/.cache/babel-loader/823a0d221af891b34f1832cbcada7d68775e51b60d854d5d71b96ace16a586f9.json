{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport request from \"@/utils/request\";\nexport default {\n  name: \"Edit\",\n  data() {\n    const checkAge = (rule, value, callback) => {\n      if (!value) {\n        callback(new Error('Please enter the age'));\n      }\n      if (!/^[0-9]*$/.test(value)) {\n        callback(new Error('Please enter a numerical value'));\n      }\n      if (parseInt(value) > 130 || parseInt(value) <= 0) {\n        callback(new Error('Please enter a reasonable value'));\n      }\n      callback();\n    };\n    const checkEmail = (rule, value, callback) => {\n      if (!value) {\n        callback(new Error('Please enter the email address'));\n      }\n      if (!/^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+(.[a-zA-Z0-9_-])+/.test(value)) {\n        callback(new Error('Illegal email address'));\n      }\n      callback();\n    };\n    const checkPhone = (rule, value, callback) => {\n      if (!value) {\n        callback(new Error('Please enter the phone number'));\n      }\n      if (!/^[1,2,3,4,5,6,7,8,9][0-9]{9}$/.test(value)) {\n        callback(new Error('Illegal phone number'));\n      }\n      callback();\n    };\n    return {\n      form: {},\n      options: [{\n        value: 'Male',\n        label: 'Male'\n      }, {\n        value: 'Female',\n        label: 'Female'\n      }, {\n        value: 'Other',\n        label: 'Other'\n      }, {\n        value: 'Unknown',\n        label: 'Prefer not disclose'\n      }],\n      // rules to check the input values\n      rules: {\n        minit: [{\n          required: false\n        }],\n        // cannot be empty\n        fname: [{\n          required: true,\n          message: 'Please enter the first name',\n          trigger: 'blur'\n        }],\n        lname: [{\n          required: true,\n          message: 'Please enter the last name',\n          trigger: 'blur'\n        }],\n        username: [{\n          required: true,\n          message: 'Please enter the username',\n          trigger: 'blur'\n        }],\n        province: [{\n          required: true,\n          message: 'Please enter the province/state',\n          trigger: 'blur'\n        }],\n        city: [{\n          required: true,\n          message: 'Please enter the city',\n          trigger: 'blur'\n        }],\n        street: [{\n          required: true,\n          message: 'Please enter the street address',\n          trigger: 'blur'\n        }],\n        // more restrictions\n        age: [{\n          required: true,\n          validator: checkAge,\n          trigger: 'blur'\n        }],\n        email: [{\n          required: true,\n          validator: checkEmail,\n          trigger: 'blur'\n        }],\n        phone: [{\n          required: true,\n          validator: checkPhone,\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  created() {\n    const email = this.$route.query.email;\n    request.get(\"/user/\" + email).then(res => {\n      this.form = res.data;\n    });\n  },\n  methods: {\n    save() {\n      this.$refs['ruleForm'].validate(valid => {\n        if (valid) {\n          request.put('user/update', this.form).then(res => {\n            if (res.code === '200') {\n              this.$notify.success('Updated');\n              this.$router.push(\"/userList\");\n            } else {\n              this.$notify.error(res.msg);\n            }\n          });\n        }\n      });\n    }\n  }\n};","map":{"version":3,"names":["request","name","data","checkAge","rule","value","callback","Error","test","parseInt","checkEmail","checkPhone","form","options","label","rules","minit","required","fname","message","trigger","lname","username","province","city","street","age","validator","email","phone","created","$route","query","get","then","res","methods","save","$refs","validate","valid","put","code","$notify","success","$router","push","error","msg"],"sources":["src/views/user/Edit.vue"],"sourcesContent":["<template>\r\n  <div style=\"padding: 10px;\">\r\n    <div style=\"font-size: 40px; font-family: Arial; margin-bottom: 5px\">Edit User</div>\r\n    <div style=\" width: 60%\">\r\n      <!-- form area -->\r\n      <el-form :inline=\"true\" :model=\"form\" :rules=\"rules\" ref=\"ruleForm\">\r\n        <el-form-item label=\"First Name: \" style=\"margin-left: 2px\">\r\n          <el-input v-model=\"form.fname\" placeholder=\"Enter first name\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"Middle: \" style=\"margin-left: 2px\">\r\n          <el-input v-model=\"form.minit\" placeholder=\"Enter middle\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"Last Name: \" style=\"margin-left: 2px\">\r\n          <el-input v-model=\"form.lname\" placeholder=\"Enter last name\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"Email: \" style=\"margin-left: 2px\">\r\n          <el-input v-model=\"form.email\" placeholder=\"Enter email\" :disabled=\"true\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"User ID: \" style=\"margin-left: 2px\">\r\n          <el-input v-model=\"form.uid\" placeholder=\"-- Cannot be changed --\" :disabled=\"true\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"Username: \" style=\"margin-left: 2px\">\r\n          <el-input v-model=\"form.username\" placeholder=\"Enter username\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"Phone: \" style=\"margin-left: 2px\">\r\n          <el-input v-model=\"form.phone\" placeholder=\"Enter phone number\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"Age: \" style=\"margin-left: 2px\">\r\n          <el-input v-model=\"form.age\" placeholder=\"Enter age\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"Gender: \" style=\"margin-left: 2px\">\r\n          <el-select v-model=\"form.gender\" placeholder=\"Please select\">\r\n            <el-option\r\n                v-for=\"item in options\"\r\n                :key=\"item.value\"\r\n                :label=\"item.label\"\r\n                :value=\"item.value\">\r\n            </el-option>\r\n          </el-select>\r\n        </el-form-item>\r\n        <el-form-item label=\"Province/State: \" style=\"margin-left: 2px\">\r\n          <el-input v-model=\"form.province\" placeholder=\"Enter province/state\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"City: \" style=\"margin-left: 2px\">\r\n          <el-input v-model=\"form.city\" placeholder=\"Enter city\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"Street: \" style=\"margin-left: 2px\">\r\n          <el-input v-model=\"form.street\" placeholder=\"Enter street\"></el-input>\r\n        </el-form-item>\r\n      </el-form>\r\n      <!-- button area -->\r\n      <div style=\"text-align: center\">\r\n        <el-button type=\"primary\" style=\"margin-left: 2px; height: 40px; min-width: 100px\" @click=\"save\">Submit</el-button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport request from \"@/utils/request\";\r\n\r\nexport default {\r\n  name: \"Edit\",\r\n  data() {\r\n    const checkAge = (rule, value, callback) => {\r\n      if(!value) {\r\n        callback(new Error('Please enter the age'));\r\n      }\r\n      if(!/^[0-9]*$/.test(value)) {\r\n        callback(new Error('Please enter a numerical value'))\r\n      }\r\n      if(parseInt(value) > 130 || parseInt(value) <= 0) {\r\n        callback(new Error('Please enter a reasonable value'))\r\n      }\r\n      callback()\r\n    };\r\n\r\n    const checkEmail = (rule, value, callback) => {\r\n      if(!value) {\r\n        callback(new Error('Please enter the email address'))\r\n      }\r\n      if(!/^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+(.[a-zA-Z0-9_-])+/.test(value)) {\r\n        callback(new Error('Illegal email address'))\r\n      }\r\n      callback()\r\n    };\r\n\r\n    const checkPhone = (rule, value, callback) => {\r\n      if(!value) {\r\n        callback(new Error('Please enter the phone number'))\r\n      }\r\n      if (!/^[1,2,3,4,5,6,7,8,9][0-9]{9}$/.test(value)) {\r\n        callback(new Error('Illegal phone number'));\r\n      }\r\n      callback()\r\n    }\r\n\r\n    return {\r\n      form: {},\r\n\r\n      options: [{\r\n        value: 'Male',\r\n        label: 'Male'\r\n      }, {\r\n        value: 'Female',\r\n        label: 'Female'\r\n      }, {\r\n        value: 'Other',\r\n        label: 'Other'\r\n      }, {\r\n        value: 'Unknown',\r\n        label: 'Prefer not disclose'\r\n      }],\r\n\r\n      // rules to check the input values\r\n      rules: {\r\n        minit: [{ required: false}],\r\n        // cannot be empty\r\n        fname: [{ required: true, message: 'Please enter the first name', trigger: 'blur' }],\r\n        lname: [{ required: true, message: 'Please enter the last name', trigger: 'blur' }],\r\n        username: [{ required: true, message: 'Please enter the username', trigger: 'blur' }],\r\n        province: [{ required: true, message: 'Please enter the province/state', trigger: 'blur' }],\r\n        city: [{ required: true, message: 'Please enter the city', trigger: 'blur' }],\r\n        street: [{ required: true, message: 'Please enter the street address', trigger: 'blur' }],\r\n        // more restrictions\r\n        age:[{ required: true, validator: checkAge, trigger: 'blur' }],\r\n        email:[{ required: true, validator: checkEmail, trigger: 'blur' }],\r\n        phone:[{ required: true, validator: checkPhone, trigger: 'blur' }]\r\n      }\r\n    }\r\n  },\r\n\r\n  created() {\r\n    const email = this.$route.query.email\r\n    request.get(\"/user/\" + email).then(res => {\r\n      this.form = res.data\r\n    })\r\n  },\r\n\r\n  methods: {\r\n    save() {\r\n      this.$refs['ruleForm'].validate((valid) => {\r\n        if(valid) {\r\n          request.put('user/update', this.form).then(res => {\r\n            if(res.code === '200') {\r\n              this.$notify.success('Updated')\r\n              this.$router.push(\"/userList\")\r\n            } else {\r\n              this.$notify.error(res.msg)\r\n            }\r\n          })\r\n        }\r\n      })\r\n    },\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>"],"mappings":";AA2DA,OAAAA,OAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA,MAAAC,QAAA,GAAAA,CAAAC,IAAA,EAAAC,KAAA,EAAAC,QAAA;MACA,KAAAD,KAAA;QACAC,QAAA,KAAAC,KAAA;MACA;MACA,gBAAAC,IAAA,CAAAH,KAAA;QACAC,QAAA,KAAAC,KAAA;MACA;MACA,IAAAE,QAAA,CAAAJ,KAAA,WAAAI,QAAA,CAAAJ,KAAA;QACAC,QAAA,KAAAC,KAAA;MACA;MACAD,QAAA;IACA;IAEA,MAAAI,UAAA,GAAAA,CAAAN,IAAA,EAAAC,KAAA,EAAAC,QAAA;MACA,KAAAD,KAAA;QACAC,QAAA,KAAAC,KAAA;MACA;MACA,2DAAAC,IAAA,CAAAH,KAAA;QACAC,QAAA,KAAAC,KAAA;MACA;MACAD,QAAA;IACA;IAEA,MAAAK,UAAA,GAAAA,CAAAP,IAAA,EAAAC,KAAA,EAAAC,QAAA;MACA,KAAAD,KAAA;QACAC,QAAA,KAAAC,KAAA;MACA;MACA,qCAAAC,IAAA,CAAAH,KAAA;QACAC,QAAA,KAAAC,KAAA;MACA;MACAD,QAAA;IACA;IAEA;MACAM,IAAA;MAEAC,OAAA;QACAR,KAAA;QACAS,KAAA;MACA;QACAT,KAAA;QACAS,KAAA;MACA;QACAT,KAAA;QACAS,KAAA;MACA;QACAT,KAAA;QACAS,KAAA;MACA;MAEA;MACAC,KAAA;QACAC,KAAA;UAAAC,QAAA;QAAA;QACA;QACAC,KAAA;UAAAD,QAAA;UAAAE,OAAA;UAAAC,OAAA;QAAA;QACAC,KAAA;UAAAJ,QAAA;UAAAE,OAAA;UAAAC,OAAA;QAAA;QACAE,QAAA;UAAAL,QAAA;UAAAE,OAAA;UAAAC,OAAA;QAAA;QACAG,QAAA;UAAAN,QAAA;UAAAE,OAAA;UAAAC,OAAA;QAAA;QACAI,IAAA;UAAAP,QAAA;UAAAE,OAAA;UAAAC,OAAA;QAAA;QACAK,MAAA;UAAAR,QAAA;UAAAE,OAAA;UAAAC,OAAA;QAAA;QACA;QACAM,GAAA;UAAAT,QAAA;UAAAU,SAAA,EAAAxB,QAAA;UAAAiB,OAAA;QAAA;QACAQ,KAAA;UAAAX,QAAA;UAAAU,SAAA,EAAAjB,UAAA;UAAAU,OAAA;QAAA;QACAS,KAAA;UAAAZ,QAAA;UAAAU,SAAA,EAAAhB,UAAA;UAAAS,OAAA;QAAA;MACA;IACA;EACA;EAEAU,QAAA;IACA,MAAAF,KAAA,QAAAG,MAAA,CAAAC,KAAA,CAAAJ,KAAA;IACA5B,OAAA,CAAAiC,GAAA,YAAAL,KAAA,EAAAM,IAAA,CAAAC,GAAA;MACA,KAAAvB,IAAA,GAAAuB,GAAA,CAAAjC,IAAA;IACA;EACA;EAEAkC,OAAA;IACAC,KAAA;MACA,KAAAC,KAAA,aAAAC,QAAA,CAAAC,KAAA;QACA,IAAAA,KAAA;UACAxC,OAAA,CAAAyC,GAAA,qBAAA7B,IAAA,EAAAsB,IAAA,CAAAC,GAAA;YACA,IAAAA,GAAA,CAAAO,IAAA;cACA,KAAAC,OAAA,CAAAC,OAAA;cACA,KAAAC,OAAA,CAAAC,IAAA;YACA;cACA,KAAAH,OAAA,CAAAI,KAAA,CAAAZ,GAAA,CAAAa,GAAA;YACA;UACA;QACA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}